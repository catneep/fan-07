@page "/carrito"
@inject ICartService CartSrv
@inject IProductService PrdtSrv
@inject NavigationManager NavMgr

<main>
  <div class="content level">
    <div class="level-left">
      <h1>Mi Carrito</h1>
    </div>
    <AuthorizeView>
      <Authorized>
        <div class="level-right">
          <a href="/pedidos">
            <span class="oi" data-glyph="clock" />
            Ver Pedidos Anteriores
          </a>
        </div>
      </Authorized>
    </AuthorizeView>
  </div>
  @if (CartSrv.Productos.Count > 0)
  {
    <div class="columns">
      <div class="column is-2"></div>
      <div class="column">
        <div class="box">
          <CartTable
            Rows="@display"
            Minus="reduce"
            Plus="add"
            Delete="delete"
          />
        </div>

        <div class="level">
          <div class="level-left">
            <p class="level-item content">
              Tienes @CartSrv.Count() producto(s) en tu carrito
            </p>
          </div>
          <div class="level-right">
            <div class="level-item content">
              <div class="columns is-multiline is-mobile">
                <div class="column is-full">
                  <p>Total: <em>$ @CartSrv.Total()</em></p>
                </div>
                <div class="column is-full">
                  <button class="button is-primary" @onclick="Order">
                    Completar Pedido
                  </button>
                </div>
              </div>
            </div>
          </div>
        </div>

      </div>
      <div class="column is-2"></div>
    </div>
  }
  else
  {
    <div class="content">
      <h4>¡Tu Carrito está vacío!</h4>
    </div>
  }
</main>

<FanFooter />

@code{
  private List<string[]> display;
  private string formatDecimal(decimal d)
  {
    int enteros = ((int)Math.Floor(((double)d)));
    int decimales = (int) (((double) d ) * 100 - enteros * 100);
    return $"{enteros}.{decimales}";
  }
  private void buildTable()
  {
    display = new List<string[]>();
      foreach (var p in CartSrv.Productos)
      {
        display.Add(
          new string[]
          {
            $"{p.Producto.Imagenes.ToList()[0].Imagen}",
            $"{p.Producto.Nombre}",
            $"{p.Cantidad}",
            $"{formatDecimal(p.Producto.Precio)}",
            $"{formatDecimal(p.Cantidad * p.Producto.Precio)}"
          }
        );
      }
  }
  protected override void OnInitialized()
  {
    if (CartSrv.Productos != null && CartSrv.Productos.Count > 0)
      buildTable();
  }

  public void reduce(int i)
  {
    CartSrv.Productos[i].Cantidad--;
    if (CartSrv.Productos[i].Cantidad <= 0){
      CartSrv.Productos.Remove(CartSrv.Productos[i]);
    }

    if (CartSrv.Productos != null && CartSrv.Productos.Count > 0)
      buildTable();
    
    StateHasChanged();
  }
  public void add(int i)
  {
    if (CartSrv.Productos[i].Cantidad < CartSrv.Productos[i].Producto.Existencia)
      CartSrv.Productos[i].Cantidad++;

    if (CartSrv.Productos != null && CartSrv.Productos.Count > 0)
      buildTable();

    StateHasChanged();
  }
  public void delete(int i)
  {
    CartSrv.Productos.Remove(CartSrv.Productos[i]);

    if (CartSrv.Productos != null && CartSrv.Productos.Count > 0)
      buildTable();

    StateHasChanged();
  }

  private void Order()
  {
    NavMgr.NavigateTo("/carrito/pago");
  }

}