@page "/productos/{id}"
@inject NavigationManager NavMgr
@inject IProductService PrdtSrv
@inject ICategoryService CatSrv
@inject ICartService CartSrv

<main>
  <div class="columns" style="padding: 2rem;">
    <div class="column is-8">
        <ImageDisplay Images="@Images"/>
    </div>
    <div class="column">
        <div class="p-2 content">
            <h4>@producto.Subcategoria.Categoria.Nombre</h4>
            <h1>@producto.Nombre</h1>
            <h2>$<b>@price<sup>@cents</sup></b></h2>

            <p>
                @producto.Descripcion
            </p>
            <button class="button is-primary is-large" @onclick="AddToCart">
                Agregar al carrito
            </button>
        </div>
    </div>
  </div>

  <section id="related">
      <div class="columns is-mobile">
          @for (int i = 0; i < 3; i++)
          {
              <div class="column">
                  <Card Title="Uh" />
              </div>
          }
      </div>
  </section>
</main>

@code{
  [Parameter] public string id { get; set; }
  private List<string> Images;
  private Producto producto;
  private Categoria categoria;
  private int price, cents;
  protected async override Task OnParametersSetAsync()
  {
    if (id != null && id != String.Empty){
      producto = await PrdtSrv.GetById(id);
      if (producto != null)
      {
        Images = await PrdtSrv.GetImages(producto);
        categoria = await CatSrv.GetForProduct(producto);
        setPrice(producto.Precio);
      }
      else
        NavMgr.NavigateTo("/404", true);
    }
      
    else
      NavMgr.NavigateTo("/404", true);
    
  }

  private void AddToCart()
  {
    CartSrv.Productos.Add(
      new CartItem{
        Cantidad = 1,
        Producto = producto
      }
    );
    Console.WriteLine($"Added {producto.Nombre} to cart (Count: {CartSrv.Productos.Count})");
  }

  private void setPrice(decimal d)
  {
    this.price = (int) Math.Floor(Convert.ToDouble(d));
    this.cents = (int) (Convert.ToDouble(d) * 100 - price * 100);
  }

}