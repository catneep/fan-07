@page "/hub/categorias/registro"
@page "/hub/categorias/{id}"
@page "/hub/categorias/{id}/edit"
@inject NavigationManager NavMgr
@inject ICategoryService CatSrv

<main>
  <div class="level">
    <h1 class="title level-item">Categoría</h1>
  </div>
  <div class="columns">
    <div class="column is-2"></div>
    <div class="column">
      <FormCategoria @ref="form" _Exists="@_Exists" Categoria="_Categoria" OnValid="() => Test()" />
    </div>
    <div class="column is-2"></div>
  </div>
</main>

<Embers.Bulma.Modal @ref="modalSuccess">
  <div class="notification is-primary content">
    <p>
      ¡Tu Registro fue añadido exitosamente!
      Puedes ver tus cambios <a href="/hub">aquí</a>.
    </p>
  </div>
</Embers.Bulma.Modal>

@code{
  [Parameter] public string id {get; set;}
  private bool _Exists = false;
  private Categoria _Categoria;
  private List<Subcategoria> _Subcategorias;
  private FormCategoria form;
  private Modal modalSuccess;
  protected override void OnInitialized()
  {
    _Exists = (id != null && id != String.Empty);
  }
  protected async override Task OnParametersSetAsync()
  {
    if (_Exists){
      _Categoria = await CatSrv.GetCategory(id);
      if (_Categoria != null)
      {
        var s = await CatSrv.GetSubcategories(_Categoria);

        if (s != null && s.Count > 0)
          _Subcategorias = s.ToList();
        else
          _Subcategorias = new List<Subcategoria>();
      }
      _Categoria.Subcategorias = _Subcategorias;
      _Exists = !(NavMgr.Uri.ToString().Contains("/edit"));
    } else {
      _Categoria = new Categoria();
      _Subcategorias = new List<Subcategoria>();
      _Categoria.Subcategorias = _Subcategorias;
    }
  }
  private async Task Test()
  {
    Console.WriteLine($"It was valid!\nRegistering...");
    _Categoria = form.Categoria;
    if (await CatSrv.Exists(_Categoria))
      await CatSrv.ModifyCategory(_Categoria);
    else
      await CatSrv.CreateCategory(_Categoria);

    modalSuccess.makeVisible();
  }
}