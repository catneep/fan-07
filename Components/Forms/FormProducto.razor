@implements IForm
@inject ICategoryService CatSrv
@inject IProductService PrdtSrv

<EditForm
  Model="@Producto"
  OnInvalidSubmit="@Invalid"
  OnValidSubmit="@Valid">
  <DataAnnotationsValidator />
  <ValidationSummary />

  <fieldset disabled="@_Exists">
    <div class="field">
      <label class="label">Nombre</label>
      <div class="control has-icons-right">
        <input
          required
          class="input"
          type="text"
          placeholder="Nombre"
          @bind-value="Producto.Nombre">
      </div>
    </div>

    <div class="field">
      <label class="label">Descripción</label>
      <div class="control has-icons-right">
        <textarea
          class="textarea"
          placeholder="Agrega una breve descripción"
          @bind="Producto.Descripcion"
          ></textarea>
      </div>
    </div>

    <div class="field">
      <label class="label">Precio</label>
      <div class="control has-icons-left has-icons-right">
        <input
          class="input"
          type="number"
          min="0.99"
          placeholder="0"
          @bind="_Precio">
        <span class="oi icon is-small is-left" data-glyph="dollar"></span>
      </div>
    </div>

    <div class="field">
      <label class="label">Existencia</label>
      <div class="control has-icons-right">
        <input
          class="input"
          type="number"
          min="0"
          placeholder="0"
          @bind-value="Producto.Existencia">
      </div>
    </div>

    <div class="field">
      <label class="label">Categoría</label>
      <div class="control">
        @if (_currentCategory != null)
        {
          <Embers.Bulma.Dropdown
            @ref="dropCategorias"
            Placeholder="@_currentCategory.Nombre"
            Items="@nombresCategorias"
          />
        }
        else
        {
          <Embers.Bulma.Dropdown
            @ref="dropCategorias"
            Placeholder="@nombresCategorias[0]"
            Items="@nombresCategorias"
          />
        }
        
      </div>
    </div>

    @if (nombresCategorias.Count > 0)
    {
      <div class="field">
        <label class="label">Subcategoría</label>
        <div class="control">
          <Embers.Bulma.Dropdown
            @ref="dropSubcategorias"
            Items="@nombresSubcategorias"
          />
        </div>
      </div>
    }

    <div class="field is-grouped">
      <div class="control">
        <button type="submit" class="button is-success">Aceptar</button>
      </div>
      <div class="control">
        <button class="button is-danger is-light">Cancelar</button>
      </div>
    </div>
  </fieldset>
</EditForm>

@code{
  [Parameter] public Producto Producto {get; set;}
  [Parameter] public EventCallback OnValid {get; set;}
  private Dropdown dropCategorias, dropSubcategorias;
  private List<Categoria> Categorias;
  private List<Subcategoria> Subcategorias;
  private List<string> nombresCategorias, nombresSubcategorias;
  private Categoria _currentCategory;
  private Subcategoria _currentSubcategory;
  private bool _Exists = false;
  private double _Precio = 0;
  private async Task GetSubcategories(Categoria c)
  {
    Subcategorias = new List<Subcategoria>();
    var s = await CatSrv.GetSubcategories(c);
    if (s.Count > 0)
      Subcategorias = s.ToList();
  }
  protected async override Task OnInitializedAsync()
  {
    var c = await CatSrv.GetCategories();
    Categorias = c.ToList();
  }
  protected async override Task OnParametersSetAsync()
  {
    if (Producto == null)
    {
      Producto = new Producto();
      _currentCategory = null;
    }
    else
    {
      _Exists = true;
      _currentCategory = await CatSrv.GetForProduct(Producto);
      await GetSubcategories(_currentCategory);
    }
    buildNameLists();
  }

  private void buildNameLists()
  {
    nombresCategorias = new List<string>();
    nombresSubcategorias = new List<string>();
    foreach (var c in Categorias)
      nombresCategorias.Add(c.Nombre);
    if (_currentCategory != null)
      foreach (var s in Subcategorias)
        nombresCategorias.Add(s.Nombre);
  }

  public Task Invalid()
  {
    //TODO: Display error messages
    Console.WriteLine($"Form not valid!");
    return Task.FromResult<bool>(false);
  }

  public Task Valid()
  {
    Console.WriteLine($"Submitting form...");
    return Task.FromResult<bool>(true);
  }

}