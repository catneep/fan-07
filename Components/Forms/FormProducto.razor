@using System.IO
@inject NavigationManager NavMgr
@implements IForm
@inject ICategoryService CatSrv
@inject IProductService PrdtSrv

<EditForm
  Model="@Producto"
  OnInvalidSubmit="@Invalid"
  OnValidSubmit="@Valid">
  <DataAnnotationsValidator />
  <ValidationSummary />

  <fieldset disabled="@_Exists">
    <div class="field">
      <label class="label">Nombre</label>
      <div class="control has-icons-right">
        <input
          required
          class="input"
          type="text"
          placeholder="Nombre"
          @bind-value="Producto.Nombre">
      </div>
    </div>

    <div class="field">
      <label class="label">Descripción</label>
      <div class="control has-icons-right">
        <textarea
          class="textarea"
          placeholder="Agrega una breve descripción"
          @bind="Producto.Descripcion"
          ></textarea>
      </div>
    </div>

    <div class="field">
      <label class="label">Imágenes</label>
      <InputFile OnChange="@LoadFiles" multiple />
    </div>

    <div class="field">
      <label class="label">Precio</label>
      <div class="control has-icons-left has-icons-right">
        <input
          class="input"
          type="number"
          min="0.50"
          placeholder="0"
          @bind="_Precio">
        <span class="oi icon is-small is-left" data-glyph="dollar"></span>
      </div>
    </div>

    <div class="field">
      <label class="label">Existencia</label>
      <div class="control has-icons-right">
        <input
          class="input"
          type="number"
          min="0"
          placeholder="0"
          @bind-value="Producto.Existencia">
      </div>
    </div>

    <div class="field">
      <label class="label">Categoría</label>
      <div class="control">
        <div class="select">
          <select @onchange="ChangeCategory">
            @foreach (var c in Categorias)
            {
              <option value="@c.Nombre">
                @c.Nombre
              </option>
            }
          </select>
        </div>
      </div>
    </div>

    @if (Subcategorias != null && Subcategorias.Count > 0)
    {
      <div class="field">
        <label class="label">Subcategoría</label>
        <div class="control">
          <div class="select">
            <select @onchange="ChangeSubcategory">
              @foreach (var s in Subcategorias)
              {
                <option
                  value="@s.Nombre">
                    @s.Nombre
                </option>
              }
            </select>
          </div>
        </div>
      </div>
    }

    <div class="field is-grouped">
      <div class="control">
        <button type="submit" class="button is-success">Aceptar</button>
      </div>
      <div class="control">
        <button class="button is-danger is-light">Cancelar</button>
      </div>
    </div>
  </fieldset>
</EditForm>

@code{
  [Parameter] public Producto Producto {get; set;}
  [Parameter] public EventCallback OnValid {get; set;}
  private List<ImagenProducto> ImagenesProducto;
  private List<Categoria> Categorias;
  private List<Subcategoria> Subcategorias;
  private Categoria _currentCategory;
  private Subcategoria _currentSubcategory;
  public bool _Exists = false;
  private double _Precio = 0;
  private async Task ChangeCategory(ChangeEventArgs e)
  {
      _currentCategory = await CatSrv.GetCategoryByName(e.Value.ToString());
      await GetSubcategories(_currentCategory);
      _currentSubcategory = Subcategorias[0];
  }
  private async Task ChangeSubcategory(ChangeEventArgs e)
  {
      _currentSubcategory = await CatSrv.GetSubcategoryByName(e.Value.ToString());
  }
  private async Task GetSubcategories(Categoria c)
  {
    Subcategorias = new List<Subcategoria>();
    var s = await CatSrv.GetSubcategories(c);
    if (s.Count > 0)
      Subcategorias = s.ToList();
  }
  protected async override Task OnInitializedAsync()
  {
    var c = await CatSrv.GetCategories();
    Categorias = c.ToList();
  }
  protected async override Task OnParametersSetAsync()
  {
    if (Producto == null)
    {
      Producto = new Producto();
      _currentCategory = Categorias[0];
    }
    else
    {
      _Exists = await PrdtSrv.Exists(Producto);
      if (_Exists)
      {
        _currentCategory = await CatSrv.GetForProduct(Producto);
        await GetSubcategories(_currentCategory);
      }
      else
      {
        _currentCategory = Categorias[0];
        await GetSubcategories(_currentCategory);
      }
    }
  }
  public Task Invalid()
  {
    //TODO: Display error messages
    Console.WriteLine($"Form not valid!");
    return Task.FromResult<bool>(false);
  }
  public async Task Valid()
  {
    if (isLoading)
      return;
    Console.WriteLine($"Submitting form...");
    Producto.Subcategoria = _currentSubcategory;
    Producto.Precio = new decimal(_Precio);
    Producto.Imagenes = ImagenesProducto;
    await OnValid.InvokeAsync();
    Console.WriteLine($"Done!");
  }
  @* Manejo de archivos *@
  private List<IBrowserFile> loadedFiles = new();
  private readonly long maxFileSize = 1024 * 1024 * 5;
  private const int maxAllowedFiles = 5;
  private bool isLoading = false;
  private async Task LoadFiles(InputFileChangeEventArgs e)
  {
    ImagenesProducto = new List<ImagenProducto>();
    isLoading = true;
    loadedFiles.Clear();

    foreach (var file in e.GetMultipleFiles(maxAllowedFiles))
    {
      try
      {
        loadedFiles.Add(file);

        var bytes = new byte[file.Size];
        await file.OpenReadStream(maxFileSize).ReadAsync(bytes, 0, bytes.Length);
        var base64 = Convert.ToBase64String(bytes);
        ImagenesProducto.Add(
          new ImagenProducto{
            Producto = Producto,
            Imagen = $"data:{file.ContentType};base64,{base64}"
          }
        );
        Console.WriteLine($"Loaded: {file.Name} Type: {file.ContentType}");
      }
      catch (Exception ex)
      {
        Console.WriteLine($"File: {file.Name} Error: {ex.Message}");
      }
    }

    isLoading = false;
  }

}