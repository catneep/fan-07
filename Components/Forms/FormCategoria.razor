@implements IForm

<EditForm
  Model="@Categoria"
  OnInvalidSubmit="@Invalid"
  OnValidSubmit="@Valid">
  <DataAnnotationsValidator />
  <ValidationSummary />

  <fieldset disabled="@_Exists">
    <div class="lahoja">
      <div class="field">
      <label class="label">Nombre</label>
      <div class="control has-icons-right">
        <input
          required
          class="input"
          type="text"
          placeholder="Nombre"
          @bind-value="Categoria.Nombre">
      </div>
    </div>

    <label class="label">Nueva Subcategoría</label>
    <div class="field is-grouped">
      <div class="control has-icons-right">
        <input
          required
          class="input"
          type="text"
          placeholder="Subcategoría"
          @bind="_Subcategoria">
      </div>
      <div class="control">
        <button type="button" class="button is-primary" @onclick="() => AddSub(_Subcategoria)">Agregar</button>
      </div>
    </div>

    <Embers.Bulma.Table
      Headers="@_Headers"
      Rows="@_Rows"
    />

    <div class="field is-grouped">
      <div class="control">
        <button type="submit" class="button is-success">Aceptar</button>
      </div>
      <div class="control">
        <button class="button is-danger is-light">Cancelar</button>
      </div>
    </div>

    </div>
    
  </fieldset>
</EditForm>

@code{
  [Parameter] public Categoria Categoria {get; set;}
  [Parameter] public EventCallback OnValid {get; set;}
  private readonly string[] _Headers = {"Subcategorías"};
  private List<string[]> _Rows;
  public bool _Exists = false;
  private string _Subcategoria = String.Empty;
  protected override void OnParametersSet()
  {
    _Rows = new List<string[]>();
    if (Categoria == null)
    {
      Categoria = new Categoria();
    }
    else{
      _Exists = true;
      if (Categoria.Subcategorias != null && Categoria.Subcategorias.Count > 0)
        foreach (var sc in Categoria.Subcategorias)
          _Rows.Add(new string[] {$"{sc.Nombre}"});
    }
  }

  private void EmptyFields()
  {
    Categoria = new Categoria();
    _Rows = new List<string[]>();
    _Subcategoria = String.Empty;
  }

  private void AddSub(string sub)
  {
    _Rows.Add(new string[] {$"{sub}"});
    var Subs = new List<Subcategoria>();
    foreach (var row in _Rows)
    {
      Subs.Add(
        new Subcategoria
          {
            Nombre = $"{row[0]}",
            Categoria = Categoria
          }
      );
    }
    Categoria.Subcategorias = Subs;
  }

  public Task Invalid()
  {
    //TODO: Display error messages
    Console.WriteLine($"Form not valid!");
    return Task.FromResult<bool>(true);
  }

  public async Task Valid()
  {
    Console.WriteLine($"Submitting form...");
    Console.WriteLine($"Categoría: {Categoria.Nombre}");
    Console.WriteLine($"Subcategorías: {Categoria.Subcategorias.Count}");
    foreach (var sub in Categoria.Subcategorias)
    {
      Console.WriteLine($"\t -{sub.Id.ToString()}: {sub.Nombre}");
    }
    await OnValid.InvokeAsync();
    EmptyFields();
    //return Task.FromResult<bool>(true);
  }

}