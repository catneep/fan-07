@inject NavigationManager NavMgr

<table class="table is-striped is-narrow is-hoverable is-fullwidth">
  <thead>
    <tr>
      <th><!-- # --></th>
      <th>Nombre</th>
      <th>Precio</th>
      <th>Existencia</th>
      <th>Categoría</th>
      <th>Subcategoría</th>
      <th>Acciones</th>
    </tr>
  </thead>
  <tbody>
    @for (int i = 0; i < Productos.Count; i++)
    {
      var index = i;
      <tr>
        <td>
          @(index + 1)
        </td>
        <td>
          @Productos[index].Nombre
        </td>
        <td>
          $ @Productos[index].Precio
        </td>
        <td>
          @Productos[index].Existencia unidad(es)
        </td>
        <td>
          @Productos[index].Subcategoria.Categoria.Nombre
        </td>
        <td>
          @Productos[index].Subcategoria.Nombre
        </td>
        <td>
          <div class="buttons">
            <button class="button is-info is-inverted is-small"
            @onclick="() => Go(Productos[index])">
              <span class="oi" data-glyph="eye" /> 
              Ver Detalles
            </button>
            <button class="button is-info is-inverted is-small"
            @onclick="() => Edit(Productos[index])">
              <span class="oi" data-glyph="pencil" /> 
              Editar
            </button>
            <button class="button is-danger is-small"
            @onclick="() => Delete(Productos[index])">
              <span class="oi" data-glyph="trash" /> 
              Eliminar
            </button>
          </div>
        </td>
      </tr>
    }
  </tbody>
</table>

@code{
  [Parameter] public List<Producto> Productos {get; set;}
  [Parameter] public EventCallback<Producto> DeleteHandler {get; set;}

  private void Go(Producto c)
  {
    NavMgr.NavigateTo($"/hub/productos/{c.Id}");
  }

  private void Edit(Producto c)
  {
    NavMgr.NavigateTo($"/hub/productos/{c.Id}/edit");
  }

  private async void Delete(Producto c)
  {
    await DeleteHandler.InvokeAsync(c);
  }
}